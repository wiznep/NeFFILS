import 'package:flutter/material.dart';
import 'package:neffils/utils/colors/color.dart';
import 'documents_form_controller.dart';

class RecommendationDocumentsForm extends StatefulWidget {
  final Map<String, dynamic> initialData;
  final Function(Map<String, dynamic>) onChanged;
  final Function(bool) onValidationChanged;
  final bool isIndustryPreselected;

  const RecommendationDocumentsForm({
    Key? key,
    required this.initialData,
    required this.onChanged,
    required this.onValidationChanged,
    required this.isIndustryPreselected,
  }) : super(key: key);

  @override
  State<RecommendationDocumentsForm> createState() => _RecommendationDocumentsFormState();
}

class _RecommendationDocumentsFormState extends State<RecommendationDocumentsForm> {
  late DocumentsFormController _formController;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _formController = DocumentsFormController(
      onValidationChanged: widget.onValidationChanged,
      onChanged: widget.onChanged,
      initialData: widget.initialData,
      isIndustryPreselected: widget.isIndustryPreselected,
    );
    _loadInitialData();
  }

  Future<void> _loadInitialData() async {
    setState(() => _isLoading = true);
    try {
      await _formController.loadInitialData();
    } catch (e) {
      debugPrint('Error loading initial data: $e');
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  Widget _buildSectionHeader(String title, {bool isRequired = false}) {
    return Padding(
      padding: const EdgeInsets.only(top: 16, bottom: 8),
      child: Row(
        children: [
          if (isRequired)
            const Padding(
              padding: EdgeInsets.only(right: 4),
              child: Text(
                '*',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: Colors.red,
                ),
              ),
            ),
          Text(
            title,
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w600,
              color: Colors.grey[800],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildIndustrySelection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildSectionHeader('Industry for Recommendation', isRequired: true),
        const SizedBox(height: 8),
        if (widget.isIndustryPreselected)
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.grey.shade300),
            ),
            child: Row(
              children: [
                Icon(Icons.business, color: Colors.grey[600]),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    _formController.selectedIndustryName ?? 'No industry selected',
                    style: TextStyle(
                      fontSize: 15,
                      color: Colors.grey[800],
                    ),
                  ),
                ),
              ],
            ),
          )
        else
          Container(
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.grey.shade300),
            ),
            padding: const EdgeInsets.symmetric(horizontal: 12),
            child: _formController.buildIndustryDropdown(),
          ),
        if (_formController.isLoadingIndustries || _formController.isLoadingDocuments)
          const Padding(
            padding: EdgeInsets.only(top: 8),
            child: LinearProgressIndicator(),
          ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return const Center(
        child: CircularProgressIndicator(),
      );
    }

    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildIndustrySelection(),
          const SizedBox(height: 24),
          _buildSectionHeader('Required Documents', isRequired: true),
          ..._formController.buildRequiredDocuments(),
          const SizedBox(height: 24),
          _buildSectionHeader('Optional Documents'),
          const SizedBox(height: 8),
          ..._formController.buildOptionalDocuments(),
          const SizedBox(height: 24),
          _buildSectionHeader('Additional Documents'),
          const SizedBox(height: 8),
          ..._formController.buildAdditionalDocuments(),
          _formController.buildAddDocumentButton(),
          const SizedBox(height: 24),
          _buildFileSizeNotes(),
        ],
      ),
    );
  }

  Widget _buildFileSizeNotes() {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.grey[50],
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Note:',
            style: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w500,
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 4),
          Text(
            '• Max File Size 5 MB (for most documents)',
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey[600],
            ),
          ),
          Text(
            '• Max File Size 20 MB (for Industry Layout)',
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey[600],
            ),
          ),
          Text(
            '• Allowed file types: PDF, DOC, DOCX, JPG, JPEG, PNG',
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey[600],
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _formController.dispose();
    super.dispose();
  }
}